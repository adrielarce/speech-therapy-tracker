{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/adrielarce/Documents/Projects/speech-therapy-tracker/stt-client/src/components/cognito-auth/Signup.jsx\";\nimport React, { useState } from \"react\"; //import Form from \"react-bootstrap/Form\";\n//import { useHistory } from \"react-router-dom\";\n//import LoaderButton from \"../LoaderButton\";\n//import { useAppContext } from \"../../libs/contextLib\";\n//import { useFormFields } from \"../../libs/hooksLib\";\n//import { onError } from \"../../libs/errorLib\";\n//import { Auth } from \"aws-amplify\";\n\nimport \"./Signup.css\";\nexport default function Signup() {\n  /*\r\n  const [fields, handleFieldChange] = useFormFields({\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      confirmationCode: \"\",\r\n  });\r\n  const history = useHistory();\r\n  const [newUser, setNewUser] = useState(null);\r\n  const { userHasAuthenticated } = useAppContext();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  function validateForm() {\r\n      return (\r\n          fields.email.length > 0 &&\r\n          fields.password.length > 0 &&\r\n          fields.password === fields.confirmPassword\r\n      );\r\n  }\r\n  function validateConfirmationForm() {\r\n      return fields.confirmationCode.length > 0;\r\n  }\r\n  async function handleSubmit(event) {\r\n      event.preventDefault();\r\n      setIsLoading(true);\r\n      try {\r\n          const newUser = await Auth.signUp({\r\n              username: fields.email,\r\n              password: fields.password,\r\n          });\r\n          setIsLoading(false);\r\n          setNewUser(newUser);\r\n      } catch (e) {\r\n          onError(e);\r\n          setIsLoading(false);\r\n      }\r\n  }\r\n  async function handleConfirmationSubmit(event) {\r\n      event.preventDefault();\r\n      setIsLoading(true);\r\n      try {\r\n          await Auth.confirmSignUp(fields.email, fields.confirmationCode);\r\n          await Auth.signIn(fields.email, fields.password);\r\n          userHasAuthenticated(true);\r\n          history.push(\"/\");\r\n      } catch (e) {\r\n          onError(e);\r\n          setIsLoading(false);\r\n      }\r\n  }\r\n    function renderConfirmationForm() {\r\n      return (\r\n          <Form onSubmit={handleConfirmationSubmit}>\r\n              <Form.Group controlId=\"confirmationCode\" size=\"lg\">\r\n                  <Form.Label>Confirmation Code</Form.Label>\r\n                  <Form.Control\r\n                      autoFocus\r\n                      type=\"tel\"\r\n                      onChange={handleFieldChange}\r\n                      value={fields.confirmationCode}\r\n                  />\r\n                  <Form.Text muted>Please check your email for the code.</Form.Text>\r\n              </Form.Group>\r\n              <LoaderButton\r\n                  block\r\n                  size=\"lg\"\r\n                  type=\"submit\"\r\n                  variant=\"success\"\r\n                  isLoading={isLoading}\r\n                  disabled={!validateConfirmationForm()}\r\n              >\r\n                  Verify\r\n              </LoaderButton>\r\n          </Form>\r\n      );\r\n  }\r\n  function renderForm() {\r\n      return (\r\n          <Form onSubmit={handleSubmit}>\r\n              <Form.Group controlId=\"email\" size=\"lg\">\r\n                  <Form.Label>Email</Form.Label>\r\n                  <Form.Control\r\n                      autoFocus\r\n                      type=\"email\"\r\n                      value={fields.email}\r\n                      onChange={handleFieldChange}\r\n                  />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"password\" size=\"lg\">\r\n                  <Form.Label>Password</Form.Label>\r\n                  <Form.Control\r\n                      type=\"password\"\r\n                      value={fields.password}\r\n                      onChange={handleFieldChange}\r\n                  />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"confirmPassword\" size=\"lg\">\r\n                  <Form.Label>Confirm Password</Form.Label>\r\n                  <Form.Control\r\n                      type=\"password\"\r\n                      onChange={handleFieldChange}\r\n                      value={fields.confirmPassword}\r\n                  />\r\n              </Form.Group>\r\n              <LoaderButton\r\n                  block\r\n                  size=\"lg\"\r\n                  type=\"submit\"\r\n                  variant=\"success\"\r\n                  isLoading={isLoading}\r\n                  disabled={!validateForm()}\r\n              >\r\n                  Signup\r\n              </LoaderButton>\r\n          </Form>\r\n      );\r\n  }\r\n  return (\r\n      <div className=\"Signup\">\r\n          {newUser === null ? renderForm() : renderConfirmationForm()}\r\n      </div>\r\n  );*/\n  return /*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"Signup placeholder\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n}\n_c = Signup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"sources":["/Users/adrielarce/Documents/Projects/speech-therapy-tracker/stt-client/src/components/cognito-auth/Signup.jsx"],"names":["React","useState","Signup"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,cAAP;AAEA,eAAe,SAASC,MAAT,GAAksBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;KA9HuBA,M","sourcesContent":["import React, { useState } from \"react\";\r\n//import Form from \"react-bootstrap/Form\";\r\n//import { useHistory } from \"react-router-dom\";\r\n//import LoaderButton from \"../LoaderButton\";\r\n//import { useAppContext } from \"../../libs/contextLib\";\r\n//import { useFormFields } from \"../../libs/hooksLib\";\r\n//import { onError } from \"../../libs/errorLib\";\r\n//import { Auth } from \"aws-amplify\";\r\nimport \"./Signup.css\";\r\n\r\nexport default function Signup() {\r\n    /*\r\n    const [fields, handleFieldChange] = useFormFields({\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        confirmationCode: \"\",\r\n    });\r\n    const history = useHistory();\r\n    const [newUser, setNewUser] = useState(null);\r\n    const { userHasAuthenticated } = useAppContext();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    function validateForm() {\r\n        return (\r\n            fields.email.length > 0 &&\r\n            fields.password.length > 0 &&\r\n            fields.password === fields.confirmPassword\r\n        );\r\n    }\r\n    function validateConfirmationForm() {\r\n        return fields.confirmationCode.length > 0;\r\n    }\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n        setIsLoading(true);\r\n        try {\r\n            const newUser = await Auth.signUp({\r\n                username: fields.email,\r\n                password: fields.password,\r\n            });\r\n            setIsLoading(false);\r\n            setNewUser(newUser);\r\n        } catch (e) {\r\n            onError(e);\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n    async function handleConfirmationSubmit(event) {\r\n        event.preventDefault();\r\n        setIsLoading(true);\r\n        try {\r\n            await Auth.confirmSignUp(fields.email, fields.confirmationCode);\r\n            await Auth.signIn(fields.email, fields.password);\r\n            userHasAuthenticated(true);\r\n            history.push(\"/\");\r\n        } catch (e) {\r\n            onError(e);\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    function renderConfirmationForm() {\r\n        return (\r\n            <Form onSubmit={handleConfirmationSubmit}>\r\n                <Form.Group controlId=\"confirmationCode\" size=\"lg\">\r\n                    <Form.Label>Confirmation Code</Form.Label>\r\n                    <Form.Control\r\n                        autoFocus\r\n                        type=\"tel\"\r\n                        onChange={handleFieldChange}\r\n                        value={fields.confirmationCode}\r\n                    />\r\n                    <Form.Text muted>Please check your email for the code.</Form.Text>\r\n                </Form.Group>\r\n                <LoaderButton\r\n                    block\r\n                    size=\"lg\"\r\n                    type=\"submit\"\r\n                    variant=\"success\"\r\n                    isLoading={isLoading}\r\n                    disabled={!validateConfirmationForm()}\r\n                >\r\n                    Verify\r\n                </LoaderButton>\r\n            </Form>\r\n        );\r\n    }\r\n    function renderForm() {\r\n        return (\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"email\" size=\"lg\">\r\n                    <Form.Label>Email</Form.Label>\r\n                    <Form.Control\r\n                        autoFocus\r\n                        type=\"email\"\r\n                        value={fields.email}\r\n                        onChange={handleFieldChange}\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"password\" size=\"lg\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        type=\"password\"\r\n                        value={fields.password}\r\n                        onChange={handleFieldChange}\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"confirmPassword\" size=\"lg\">\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control\r\n                        type=\"password\"\r\n                        onChange={handleFieldChange}\r\n                        value={fields.confirmPassword}\r\n                    />\r\n                </Form.Group>\r\n                <LoaderButton\r\n                    block\r\n                    size=\"lg\"\r\n                    type=\"submit\"\r\n                    variant=\"success\"\r\n                    isLoading={isLoading}\r\n                    disabled={!validateForm()}\r\n                >\r\n                    Signup\r\n                </LoaderButton>\r\n            </Form>\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"Signup\">\r\n            {newUser === null ? renderForm() : renderConfirmationForm()}\r\n        </div>\r\n    );*/\r\n    return(\r\n        <h3>Signup placeholder</h3>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}