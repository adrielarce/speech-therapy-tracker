{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import React from'react';import{BrowserRouter as Router,Route,Switch}from'react-router-dom';import jwt_decode from\"jwt-decode\";import setAuthToken from\"../utils/setAuthToken\";import{setCurrentUser,logoutUser}from\"../actions/authActions\";import{SideBar}from'../components';import Landing from'../components/Landing';import Register from\"../components/auth/Register\";import Login from\"../components/auth/Login\";import{Provider}from\"react-redux\";import store from\"../store\";import PrivateRoute from\"../components/private-route/PrivateRoute\";import Dashboard from\"../components/dashboard/Dashboard\";import{MoviesInsert,MoviesUpdate}from'../pages';import'bootstrap/dist/css/bootstrap.min.css';// Check for token to keep user logged in\nif(localStorage.jwtToken){// Set auth token header auth\nvar token=localStorage.jwtToken;setAuthToken(token);// Decode token and get user info and exp\nvar decoded=jwt_decode(token);// Set user and isAuthenticated\nstore.dispatch(setCurrentUser(decoded));// Check for expired token\nvar currentTime=Date.now()/1000;// to get in milliseconds\nif(decoded.exp<currentTime){// Logout user\nstore.dispatch(logoutUser());// Redirect to login\nwindow.location.href=\"./login\";}}function App(){return/*#__PURE__*/_jsx(Provider,{store:store,children:/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsx(SideBar,{})})});}export default App;","map":{"version":3,"sources":["/Users/adrielarce/Documents/Projects/esdm-therapy-tracker-home-final/client/src/app/index.js"],"names":["React","BrowserRouter","Router","Route","Switch","jwt_decode","setAuthToken","setCurrentUser","logoutUser","SideBar","Landing","Register","Login","Provider","store","PrivateRoute","Dashboard","MoviesInsert","MoviesUpdate","localStorage","jwtToken","token","decoded","dispatch","currentTime","Date","now","exp","window","location","href","App"],"mappings":"2CAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,aAAa,GAAIC,CAAAA,MAA1B,CAAkCC,KAAlC,CAAyCC,MAAzC,KAAuD,kBAAvD,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CACA,MAAOC,CAAAA,YAAP,KAAyB,uBAAzB,CACA,OAASC,cAAT,CAAyBC,UAAzB,KAA2C,wBAA3C,CACA,OAASC,OAAT,KAAwB,eAAxB,CACA,MAAOC,CAAAA,OAAP,KAAoB,uBAApB,CACA,MAAOC,CAAAA,QAAP,KAAqB,6BAArB,CACA,MAAOC,CAAAA,KAAP,KAAkB,0BAAlB,CACA,OAASC,QAAT,KAAyB,aAAzB,CACA,MAAOC,CAAAA,KAAP,KAAkB,UAAlB,CACA,MAAOC,CAAAA,YAAP,KAAyB,0CAAzB,CACA,MAAOC,CAAAA,SAAP,KAAsB,mCAAtB,CACA,OAASC,YAAT,CAAuBC,YAAvB,KAA2C,UAA3C,CACA,MAAO,sCAAP,CACA;AACA,GAAIC,YAAY,CAACC,QAAjB,CAA2B,CACvB;AACA,GAAMC,CAAAA,KAAK,CAAGF,YAAY,CAACC,QAA3B,CACAd,YAAY,CAACe,KAAD,CAAZ,CACA;AACA,GAAMC,CAAAA,OAAO,CAAGjB,UAAU,CAACgB,KAAD,CAA1B,CACA;AACAP,KAAK,CAACS,QAAN,CAAehB,cAAc,CAACe,OAAD,CAA7B,EAAwC;AACxC,GAAME,CAAAA,WAAW,CAAGC,IAAI,CAACC,GAAL,GAAa,IAAjC,CAAuC;AACvC,GAAIJ,OAAO,CAACK,GAAR,CAAcH,WAAlB,CAA+B,CAC7B;AACAV,KAAK,CAACS,QAAN,CAAef,UAAU,EAAzB,EAAiC;AACjCoB,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAuB,SAAvB,CACD,CACJ,CACD,QAASC,CAAAA,GAAT,EAAe,CACX,mBACI,KAAC,QAAD,EAAU,KAAK,CAAEjB,KAAjB,uBACI,KAAC,MAAD,wBACI,KAAC,OAAD,IADJ,EADJ,EADJ,CAOH,CAED,cAAeiB,CAAAA,GAAf","sourcesContent":["import React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport { setCurrentUser, logoutUser } from \"../actions/authActions\";\nimport { SideBar } from '../components'\nimport Landing from '../components/Landing'\nimport Register from \"../components/auth/Register\";\nimport Login from \"../components/auth/Login\";\nimport { Provider } from \"react-redux\";\nimport store from \"../store\";\nimport PrivateRoute from \"../components/private-route/PrivateRoute\";\nimport Dashboard from \"../components/dashboard/Dashboard\";\nimport { MoviesInsert, MoviesUpdate } from '../pages';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n// Check for token to keep user logged in\nif (localStorage.jwtToken) {\n    // Set auth token header auth\n    const token = localStorage.jwtToken;\n    setAuthToken(token);\n    // Decode token and get user info and exp\n    const decoded = jwt_decode(token);\n    // Set user and isAuthenticated\n    store.dispatch(setCurrentUser(decoded));// Check for expired token\n    const currentTime = Date.now() / 1000; // to get in milliseconds\n    if (decoded.exp < currentTime) {\n      // Logout user\n      store.dispatch(logoutUser());    // Redirect to login\n      window.location.href = \"./login\";\n    }\n}\nfunction App() {\n    return (\n        <Provider store={store}>\n            <Router>\n                <SideBar/>\n            </Router>\n        </Provider>\n    )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}